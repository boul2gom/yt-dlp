name: Github CI - Automatic biweekly release

on:
  schedule:
    - cron: '0 0 1,15 * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check_status:
    name: ✅ Check Github CI - Development status
    runs-on: ubuntu-latest
    outputs:
      ci_success: ${{ steps.check.outputs.ci_success }}
    steps:
      - name: 🔍 Check if last CI run was successful
        id: check_ci
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "Github CI - Development",
              branch: "develop",
              status: "success",
              per_page: 1
            });
            
            core.setOutput("ci_success", runs.data.workflow_runs.length > 0 ? "true" : "false");

  create_release:
    name: 🔖 Create a new release
    needs: check_status
    if: ${{ needs.check_status.outputs.ci_success == 'true' }}

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 📁 Check out the repository
        uses: actions/checkout@v4.2.2

      - name: 📦 Cache Rust toolchain
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: rust-toolchain-

      - name: 🛠️ Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: 📌 Install cargo-release
        run: cargo install cargo-release

      - name: 🪪 Set up Git identity
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 🚀 Create a new patch release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo release patch --execute --no-confirm

      - name: 🔍 Get new version
        id: get_version
        run: echo "version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')" >> $GITHUB_ENV

      - name: 📝 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version }}
          release_name: 🔖 v${{ env.version }}
          draft: false
          prerelease: false